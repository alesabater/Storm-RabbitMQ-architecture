{% extends "index.html" %}
{% block content %}

<div id="tooltip" class="hidden">
	<p><strong>Name</strong></p>
	<p><span id="value">100</span></p>
</div>

<!-- SOCKET -->
<script>
// Stomp.js boilerplate
var ws = new SockJS('http://172.22.23.213:15674/stomp');
//alert('http://' + window.location.hostname + '127.0.0.1:15674/stomp');
var client = Stomp.over(ws);

// SockJS does not support heart-beat: disable heart-beats
client.heartbeat.outgoing = 0;
client.heartbeat.incoming = 0;

var on_connect = function(x) {
    id = client.subscribe("/topic/test", function(d) {
       var a = JSON.parse(d.body)
       graficar(a);
    });
};
var on_error =  function() {
  console.log('error');
};
client.connect('guest', 'guest', on_connect, on_error, '/');

</script>

<script type="text/javascript">

	//Width and height
	//var w = 600;
	//var h = 250;


	var dataset = [{"protocolo":"UDP", "cuenta":5},{"protocolo":"HTTP", "cuenta":7},{"protocolo":"Mensajes", "cuenta":10}];

	var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

	var x0 = d3.scale.ordinal()
	    .rangeRoundBands([0, width], .1);
	
	var x1 = d3.scale.ordinal();
	
	var y = d3.scale.linear()
	    .range([height, 0])
		.domain([0, d3.max(dataset, function(d) { return d.cuenta;	})]);
		
	var color = d3.scale.ordinal()
	    //.range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
		.range(["#98abc5", "#7b6888", "#a05d56", "#ff8c00"]);
		
	var xScale = d3.scale.ordinal()
		.domain(d3.range(dataset.length))
		.rangeRoundBands([0, width], 0.05);

	var yScale = d3.scale.linear()
		.domain([0, d3.max(dataset, function(d) { return d.cuenta;	})])
		.range([0, height]);
		
	var xAxis = d3.svg.axis()
	    .scale(x0)
	    .orient("bottom");
	
	var yAxis = d3.svg.axis()
	    .scale(y)
	    .orient("left")
	    .tickFormat(d3.format(".2s"));
					
	var svg = d3.select(".jumbotron").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  .append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	
	/*x0.domain(data.map(function(d) { return d.Ip; }));
	x1.domain(ageNames).rangeRoundBands([0, x0.rangeBand()]);
	y.domain([0, d3.max(data, function(d) { return d3.max(d.ages, function(d) { return d.value; }); })]);*/
				
	svg.append("g")
	    .attr("class", "y axis")
	    .call(yAxis)
	  .append("text")
	    .attr("transform", "rotate(-90)")
	    .attr("y", 6)
	    .attr("dy", ".71em")
	    .style("text-anchor", "end")
		.text("Paquetes");
	
	//Create bars
	svg.selectAll("rect")
	   .data(dataset)
	   .enter()
	   .append("rect")
	   .attr("x", function(d, i) {
	   		return xScale(i);
	   })
	   .attr("y", function(d,i) {
	   		return height - yScale(d.cuenta);
	   })
	   .attr("width", xScale.rangeBand())
	   .attr("height", function(d,i) {
	   		return yScale(d.cuenta);
	   })
	   .style("fill", function(d) { return color(d.protocolo); });
	   /*.attr("fill", function(d,i) {
			return "rgb(0, 0, " + (d.cuenta * 10) + ")";
	   });*/

	//Create labels
	svg.selectAll("text")
	   .data(dataset)
	   .enter()
	   .append("text")
	   .text(function(d) {
	   		return d;
	   })
	   .attr("text-anchor", "middle")
	   .attr("x", function(d, i) {
	   		return xScale(i) + xScale.rangeBand() / 2;
	   })
	   .attr("y", function(d) {
	   		return height - yScale(d) + 14;
	   })
	   .attr("font-family", "sans-serif")
	   .attr("font-size", "11px")
	   .attr("fill", "white");
	
	var legend = svg.selectAll(".legend")
	    .data(dataset)
	  .enter().append("g")
	    .attr("class", "legend")
	    .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
	
	legend.append("rect")
	    .attr("x", width - 18)
	    .attr("width", 18)
	    .attr("height", 18)
	    .style("fill", color);
	
	legend.append("text")
	    .attr("x", width - 24)
	    .attr("y", 9)
	    .attr("dy", ".35em")
	    .style("text-anchor", "end")
	    .text(function(d) { return d.protocolo; });
	
	
	   //On click, update with new data			
function graficar(data) {
		   
	//console.log(data.protocolo);
	if (data[0].protocolo == "UDP"){
		dataset[0] = data[0];
	}else if (data[0].protocolo == "HTTP"){
		dataset[1] = data[0];
	}else if (data[0].protocolo == "MENSAJES"){
		dataset[2] = data[0];
	}
	
	y.domain([0, d3.max(dataset, function(d) { return d.cuenta;	})]);
	
	//Update X axis
	svg.select(".x.axis")
		.transition()
		.duration(1000)
		.call(xAxis);
		
	//Update Y axis
	svg.select(".y.axis")
		.transition()
		.duration(1000)
		.call(yAxis);
	
	//Update all rects
	svg.selectAll("rect")
	   .data(dataset)
	   .transition()
	   .attr("y", function(d) {
	   		return height - yScale(d.cuenta);
	   })
	   .attr("height", function(d) {
	   		return yScale(d.cuenta);
	   })
	   .attr("fill", function(d) {
			return "rgb(0, 0, " + (d.cuenta * 10) + ")";
	   });

	//Update all labels
	svg.selectAll("text")
	   .data(dataset)
	   .text(function(d) {
	   		return d.cantidad;
	   })
	   .attr("x", function(d, i) {
	   		return xScale(i) + xScale.rangeBand() / 2;
	   })
	   .attr("y", function(d) {
	   		return height - yScale(d.cuenta) + 14;
	   });//*/	 				
	};
</script>



<!-- GRAFICACION 
<script type="text/javascript">
//{protocolo:alskd,cuenta:20}
var data = [{'Ip':'172.22.23.213', 
				'UDP':1098, 
				'HTTP':225, 
				//'STP':2159981, 
				//'TCP':3853788 
			}/*,
			{'Ip':'177.22.22.25', 
				'UDP':2204659, 
				'HTTP':4199890, 
				'STP':1959981, 
				'TCP':2853788
			},
			{'Ip':'177.22.22.30', 
				'UDP':1204659, 
				'HTTP':3199890, 
				'STP':4959981, 
				'TCP':853788
			},
			{'Ip':'177.22.22.22', 
				'UDP':3204659, 
				'HTTP':2199890, 
				'STP':959981, 
				'TCP':5853788
			},
			{'Ip':'177.22.22.27', 
				'UDP':3204659, 
				'HTTP':5199890, 
				'STP':2959981, 
				'TCP':2853788
			}*/];

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x0 = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var x1 = d3.scale.ordinal();

var y = d3.scale.linear()
    .range([height, 0]);

var color = d3.scale.ordinal()
    //.range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
	.range(["#98abc5", "#7b6888", "#a05d56", "#ff8c00"]);

var xAxis = d3.svg.axis()
    .scale(x0)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(d3.format(".2s"));

var svg = d3.select(".jumbotron").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


var ageNames = d3.keys(data[0]).filter(function(key) { return key !== "Ip"; });

data.forEach(function(d) {
  d.ages = ageNames.map(function(name) { return {name: name, value: +d[name]}; });
});

x0.domain(data.map(function(d) { return d.Ip; }));
x1.domain(ageNames).rangeRoundBands([0, x0.rangeBand()]);
y.domain([0, d3.max(data, function(d) { return d3.max(d.ages, function(d) { return d.value; }); })]);

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Paquetes");

var state = svg.selectAll(".state")
    .data(data)
  .enter().append("g")
    .attr("class", "g")
    .attr("transform", function(d) { return "translate(" + x0(d.Ip) + ",0)"; });

state.selectAll("rect")
    .data(function(d) { return d.ages; })
  .enter().append("rect")
    .attr("width", x1.rangeBand())
    .attr("x", function(d) { return x1(d.name); })
    .attr("y", function(d) { return y(d.value); })
    .attr("height", function(d) { return height - y(d.value); })
    .style("fill", function(d) { return color(d.name); });
    /*.on("mouseover", function(d) {
		//Get this bar's x/y values, then augment for the tooltip
		var xPosition = parseFloat(d3.select(this).attr("x"))+400;
		var yPosition = parseFloat(d3.select(this).attr("y"))+400;

		//Update the tooltip position and value
		d3.select("#tooltip")
			.style("left", xPosition + "px")
			.style("top", yPosition + "px")						
			.select("#value")
			.text(d.value);
   
		//Show the tooltip
		d3.select("#tooltip").classed("hidden", false);

   })
   .on("mouseout", function() {
   
		//Hide the tooltip
		d3.select("#tooltip").classed("hidden", true);
   });//*/

var legend = svg.selectAll(".legend")
    .data(ageNames.slice().reverse())
  .enter().append("g")
    .attr("class", "legend")
    .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

legend.append("rect")
    .attr("x", width - 18)
    .attr("width", 18)
    .attr("height", 18)
    .style("fill", color);

legend.append("text")
    .attr("x", width - 24)
    .attr("y", 9)
    .attr("dy", ".35em")
    .style("text-anchor", "end")
    .text(function(d) { return d; });


</script>
-->
{% endblock %}